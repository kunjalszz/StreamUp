{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\netflix clone\\\\streamup_frontend\\\\src\\\\Row.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from './axios';\nimport \"./Row.css\";\nimport YouTube from 'react-youtube';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst posterBaseUrl = \"https://image.tmdb.org/t/p/original/\";\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState([\"\"]);\n\n  //getting url\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      // console.log(request);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  console.log(movies);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || (movie === null || movie === void 0 ? void 0 : movie.original_name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${posterBaseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(Row, \"ouHvS+RFhfUuziIsO6Hnp7x7zpM=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useEffect","useState","axios","YouTube","jsxDEV","_jsxDEV","posterBaseUrl","Row","title","fetchUrl","isLargeRow","_s","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","console","log","opts","height","width","playerVars","autoplay","handleClick","movie","movieTrailer","name","original_name","then","url","urlParams","URLSearchParams","URL","search","catch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","src","poster_path","backdrop_path","alt","id","videoId","_c","$RefreshReg$"],"sources":["D:/projects/netflix clone/streamup_frontend/src/Row.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from './axios';\nimport \"./Row.css\"\nimport YouTube from 'react-youtube';\n\nconst posterBaseUrl=\"https://image.tmdb.org/t/p/original/\";\nfunction Row({title,fetchUrl,isLargeRow}) {\n    const [movies, setMovies]=useState([]);\n    const [trailerUrl,setTrailerUrl]=useState([\"\"]);\n    \n    //getting url\n    useEffect(()=>{\n        async function fetchData() {\n            const request=await axios.get(fetchUrl);\n            // console.log(request);\n            setMovies(request.data.results);\n            return request;     \n        }\n        fetchData();\n    },[fetchUrl]);\n\n     console.log(movies);\n    const opts={\n        height:\"390\",\n        width:\"100%\",\n        playerVars: {\n            // https://developers.google.com/youtube/player_parameters\n            autoplay: 1,\n          },\n    };\n\n    const handleClick=(movie)=>{\n        if(trailerUrl)\n        {\n            setTrailerUrl(\"\");\n        }\n        else\n        {\n            movieTrailer(movie?.name || movie?.original_name || \"\" )\n            .then(url=>{\nconst urlParams=new URLSearchParams(new URL(url).search);\nsetTrailerUrl(urlParams.get('v'));\n            }).catch(error=>console.log(error));\n            \n        }\n    }\n\n  return (\n    <div className=\"row\"> \n        <h4>{title}</h4>\n        <div className=\"posters\" >\n            {\n                movies.map(movie=>(\n                    <img \n                    key={movie.id}\n                    onClick={()=>handleClick(movie)}\n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n\n                     src={`${posterBaseUrl}${isLargeRow?movie.poster_path:movie.backdrop_path}`} alt={movie.name}/>\n                ))\n            }\n\n        </div>\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\n         \n      \n    </div>\n  )\n}\n\nexport default Row\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}