{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\netflix clone\\\\streamup_frontend\\\\src\\\\Row.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from './axios';\nimport \"./Row.css\";\nimport YouTube from 'react-youtube';\nimport movieTrailer from \"movie-trailer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst posterBaseUrl = \"https://image.tmdb.org/t/p/original/\";\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\"); // Fix: Initialize as empty string\n\n  // Fetch movies from API\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  // Handle clicking on a movie poster\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\"); // Close trailer if it's already playing\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || (movie === null || movie === void 0 ? void 0 : movie.original_name) || (movie === null || movie === void 0 ? void 0 : movie.title) || \"\").then(url => {\n        if (url) {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get('v'));\n        } else {\n          console.log(\"Trailer not found.\");\n        }\n      }).catch(error => console.log(error));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${posterBaseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useEffect","useState","axios","YouTube","movieTrailer","jsxDEV","_jsxDEV","posterBaseUrl","Row","title","fetchUrl","isLargeRow","_s","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","original_name","then","url","urlParams","URLSearchParams","URL","search","console","log","catch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","src","poster_path","backdrop_path","alt","id","videoId","_c","$RefreshReg$"],"sources":["D:/projects/netflix clone/streamup_frontend/src/Row.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from './axios';\nimport \"./Row.css\";\nimport YouTube from 'react-youtube';\nimport movieTrailer from \"movie-trailer\";\n\nconst posterBaseUrl = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\"); // Fix: Initialize as empty string\n\n    // Fetch movies from API\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1,\n        },\n    };\n\n    // Handle clicking on a movie poster\n    const handleClick = (movie) => {\n        if (trailerUrl) {\n            setTrailerUrl(\"\"); // Close trailer if it's already playing\n        } else {\n            movieTrailer(movie?.name || movie?.original_name || movie?.title || \"\")\n                .then((url) => {\n                    if (url) {\n                        const urlParams = new URLSearchParams(new URL(url).search);\n                        setTrailerUrl(urlParams.get('v'));\n                    } else {\n                        console.log(\"Trailer not found.\");\n                    }\n                })\n                .catch((error) => console.log(error));\n        }\n    };\n\n    return (\n        <div className=\"row\">\n            <h4>{title}</h4>\n            <div className=\"posters\">\n                {movies.map((movie) => (\n                    <img\n                        key={movie.id}\n                        onClick={() => handleClick(movie)}\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                        src={`${posterBaseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\n                        alt={movie.name}\n                    />\n                ))}\n            </div>\n            {/* Trailer only appears when a poster is clicked */}\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n        </div>\n    );\n}\n\nexport default Row;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}